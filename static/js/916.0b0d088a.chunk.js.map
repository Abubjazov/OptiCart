{"version":3,"file":"static/js/916.0b0d088a.chunk.js","mappings":"gOAmBIA,EAAS,WAGX,IAH0B,IAAdC,EAAc,uDAAP,GACfC,EAAK,GACLC,EAAQC,OAAOC,gBAAgB,IAAIC,WAAWL,IAC3CA,KAAQ,CACb,IAAIM,EAAqB,GAAdJ,EAAMF,GAEfC,GADEK,EAAO,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,IAGV,OAAOL,G,iDClBIQ,EAAW,WACvB,OAA+CC,EAAAA,EAAAA,IAC9C,SAAAC,GAAK,OAAIA,EAAMC,QADRC,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,cAAeC,EAA/B,EAA+BA,MAAOH,EAAtC,EAAsCA,KAG9BI,GAAcC,EAAAA,EAAAA,KAAdD,UAOR,OALAE,EAAAA,EAAAA,YAAU,WACTF,MAEE,IAEY,YAAXH,GAA0C,OAAlBC,GAE1B,iBAAMK,UAAU,YAAhB,UACC,gBAAKA,UAAU,YAAf,UACC,gBAAKA,UAAU,OAAf,UACC,SAAC,KAAD,UAOU,UAAXN,GAEF,2BACC,SAAC,KAAD,CAAcE,MAAOA,OAMvB,iBAAMI,UAAU,YAAhB,UACC,gBAAKA,UAAU,YAAf,SACEP,EAAKQ,OAAS,GACd,iCACC,iBAAKD,UAAU,OAAf,UACE,IACAP,EACCS,KAAI,SAACC,GAAD,OACJ,SAAC,MAAD,UAA6BA,GAAdvB,QAEfwB,cAGH,gBAAKJ,UAAU,QAAf,UACC,SAAC,KAAD,UAIF,SAAC,KAAD,SCxDQK,EAAW,WACvB,OAAsDd,EAAAA,EAAAA,IACrD,SAAAC,GAAK,OAAIA,EAAMc,WADRZ,EAAR,EAAQA,OAAQa,EAAhB,EAAgBA,iBAAkBX,EAAlC,EAAkCA,MAAOY,EAAzC,EAAyCA,SAGjCC,GAAkBX,EAAAA,EAAAA,KAAlBW,cAOR,OALAV,EAAAA,EAAAA,YAAU,WACTU,MAEE,IAEY,YAAXf,GAA6C,OAArBa,GAE1B,iBAAMP,UAAU,YAAhB,UACC,gBAAKA,UAAU,YAAf,UACC,SAAC,KAAD,QAMW,UAAXN,GAEF,2BACC,SAAC,KAAD,CAAcE,MAAOA,OAMvB,iBAAMI,UAAU,YAAhB,UACC,gBAAKA,UAAU,YAAf,SACEQ,EAASN,KAAI,SAACC,GAAD,OACb,SAAC,MAAD,UAAgCA,GAAdvB,a,UCvCV8B,EAAU,kBACtB,kBACCC,MAAO,CACNC,WAAY,KAFd,WAKC,SAAC,KAAD,KACA,cAAGD,MAAO,CAAEE,UAAW,SAAUC,WAAY,IAAKC,SAAU,IAA5D,iCAGA,SAAC,KAAD,CACCC,GAAG,aACHL,MAAO,CACNM,QAAS,QACTJ,UAAW,SACXC,WAAY,IACZC,SAAU,GACVG,UAAW,GACXC,MAAO,WART","sources":["../node_modules/nanoid/index.browser.js","pages/CartPage/CartPage.tsx","pages/MainPage/MainPage.tsx","pages/Page404/Page404.tsx"],"sourcesContent":["import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import { nanoid } from 'nanoid'\r\nimport { useEffect } from 'react'\r\n\r\nimport {\r\n\tCartItem,\r\n\tCheckout,\r\n\tErrorMessage,\r\n\tMessage,\r\n\tSpinner,\r\n} from '../../components'\r\nimport { useActions } from '../../hooks/useActions'\r\nimport { useTypedSelector } from '../../hooks/useTypedSelector'\r\nimport { CartListItem } from '../../interfaces'\r\n\r\nimport './CartPage.scss'\r\n\r\nexport const CartPage = (): JSX.Element => {\r\n\tconst { status, currentItemId, error, cart } = useTypedSelector(\r\n\t\tstate => state.cart\r\n\t)\r\n\tconst { fetchCart } = useActions()\r\n\r\n\tuseEffect(() => {\r\n\t\tfetchCart()\r\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\r\n\t}, [])\r\n\r\n\tif (status === 'loading' && currentItemId === null) {\r\n\t\treturn (\r\n\t\t\t<main className='cart-page'>\r\n\t\t\t\t<div className='container'>\r\n\t\t\t\t\t<div className='cart'>\r\n\t\t\t\t\t\t<Spinner />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</main>\r\n\t\t)\r\n\t}\r\n\r\n\tif (status === 'error') {\r\n\t\treturn (\r\n\t\t\t<main>\r\n\t\t\t\t<ErrorMessage error={error} />\r\n\t\t\t</main>\r\n\t\t)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<main className='cart-page'>\r\n\t\t\t<div className='container'>\r\n\t\t\t\t{cart.length > 0 ? (\r\n\t\t\t\t\t<>\r\n\t\t\t\t\t\t<div className='cart'>\r\n\t\t\t\t\t\t\t{' '}\r\n\t\t\t\t\t\t\t{cart\r\n\t\t\t\t\t\t\t\t.map((item: CartListItem) => (\r\n\t\t\t\t\t\t\t\t\t<CartItem key={nanoid()} {...item} />\r\n\t\t\t\t\t\t\t\t))\r\n\t\t\t\t\t\t\t\t.reverse()}\r\n\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t<div className='total'>\r\n\t\t\t\t\t\t\t<Checkout />\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</>\r\n\t\t\t\t) : (\r\n\t\t\t\t\t<Message />\r\n\t\t\t\t)}\r\n\t\t\t</div>\r\n\t\t</main>\r\n\t)\r\n}\r\n","import { nanoid } from 'nanoid'\r\nimport { useEffect } from 'react'\r\n\r\nimport { ErrorMessage, ProductCard, Spinner } from '../../components'\r\nimport { useActions } from '../../hooks/useActions'\r\nimport { useTypedSelector } from '../../hooks/useTypedSelector'\r\nimport { Product } from '../../interfaces/product.interface'\r\n\r\nimport './MainPage.scss'\r\n\r\nexport const MainPage = (): JSX.Element => {\r\n\tconst { status, currentProductId, error, products } = useTypedSelector(\r\n\t\tstate => state.product\r\n\t)\r\n\tconst { fetchProducts } = useActions()\r\n\r\n\tuseEffect(() => {\r\n\t\tfetchProducts()\r\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\r\n\t}, [])\r\n\r\n\tif (status === 'loading' && currentProductId === null) {\r\n\t\treturn (\r\n\t\t\t<main className='main-page'>\r\n\t\t\t\t<div className='container'>\r\n\t\t\t\t\t<Spinner />\r\n\t\t\t\t</div>\r\n\t\t\t</main>\r\n\t\t)\r\n\t}\r\n\r\n\tif (status === 'error') {\r\n\t\treturn (\r\n\t\t\t<main>\r\n\t\t\t\t<ErrorMessage error={error} />\r\n\t\t\t</main>\r\n\t\t)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<main className='main-page'>\r\n\t\t\t<div className='container'>\r\n\t\t\t\t{products.map((item: Product) => (\r\n\t\t\t\t\t<ProductCard key={nanoid()} {...item} />\r\n\t\t\t\t))}\r\n\t\t\t</div>\r\n\t\t</main>\r\n\t)\r\n}\r\n","import { Link } from 'react-router-dom'\r\n\r\nimport { ErrorGif } from '../../components'\r\n\r\nexport const Page404 = (): JSX.Element => (\r\n\t<main\r\n\t\tstyle={{\r\n\t\t\tpaddingTop: 100,\r\n\t\t}}\r\n\t>\r\n\t\t<ErrorGif />\r\n\t\t<p style={{ textAlign: 'center', fontWeight: 300, fontSize: 24 }}>\r\n\t\t\tPage doesn't exist\r\n\t\t</p>\r\n\t\t<Link\r\n\t\t\tto='/optiCart/'\r\n\t\t\tstyle={{\r\n\t\t\t\tdisplay: 'block',\r\n\t\t\t\ttextAlign: 'center',\r\n\t\t\t\tfontWeight: 300,\r\n\t\t\t\tfontSize: 24,\r\n\t\t\t\tmarginTop: 13,\r\n\t\t\t\tcolor: '#3b8079',\r\n\t\t\t}}\r\n\t\t>\r\n\t\t\tBack to main page\r\n\t\t</Link>\r\n\t</main>\r\n)\r\n"],"names":["nanoid","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","CartPage","useTypedSelector","state","cart","status","currentItemId","error","fetchCart","useActions","useEffect","className","length","map","item","reverse","MainPage","product","currentProductId","products","fetchProducts","Page404","style","paddingTop","textAlign","fontWeight","fontSize","to","display","marginTop","color"],"sourceRoot":""}